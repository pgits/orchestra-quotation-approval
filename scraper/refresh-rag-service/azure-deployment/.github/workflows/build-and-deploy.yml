name: Build and Deploy Copilot Refresh Service

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'container/**'
      - '.github/workflows/build-and-deploy.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'container/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

env:
  AZURE_RESOURCE_GROUP: rg-copilot-refresh
  AZURE_REGISTRY_NAME: copilotrefreshacr597769
  AZURE_CONTAINER_APP_NAME: copilot-refresh-app
  AZURE_CONTAINER_APP_ENV: copilot-refresh-env
  AZURE_LOCATION: eastus
  CONTAINER_NAME: copilot-refresh-service
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_REGISTRY_NAME }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./container
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.AZURE_REGISTRY_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest
          ${{ env.AZURE_REGISTRY_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image details
      run: |
        echo "Image pushed to: ${{ env.AZURE_REGISTRY_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest"
        echo "Image SHA: ${{ github.sha }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get registry credentials
      id: registry-creds
      run: |
        REGISTRY_PASSWORD=$(az acr credential show --name ${{ env.AZURE_REGISTRY_NAME }} --query "passwords[0].value" -o tsv)
        echo "::add-mask::$REGISTRY_PASSWORD"
        echo "registry-password=$REGISTRY_PASSWORD" >> $GITHUB_OUTPUT
        
    - name: Deploy to Azure Container App
      run: |
        az containerapp update \
          --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.AZURE_REGISTRY_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest \
          --registry-server ${{ env.AZURE_REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ env.AZURE_REGISTRY_NAME }} \
          --registry-password ${{ steps.registry-creds.outputs.registry-password }} \
          --set-env-vars \
            AGENT_ID="${{ secrets.COPILOT_AGENT_ID }}" \
            ENVIRONMENT_ID="${{ secrets.COPILOT_ENVIRONMENT_ID }}" \
            SHAREPOINT_SITE_URL="${{ secrets.SHAREPOINT_SITE_URL }}" \
            SHAREPOINT_LIBRARY_NAME="${{ secrets.SHAREPOINT_LIBRARY_NAME }}" \
            SHAREPOINT_FOLDER_PATH="${{ secrets.SHAREPOINT_FOLDER_PATH }}" \
            SHAREPOINT_TENANT="${{ secrets.SHAREPOINT_TENANT }}" \
            APPINSIGHTS_INSTRUMENTATION_KEY="${{ secrets.APPINSIGHTS_INSTRUMENTATION_KEY }}" \
            AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
            
    - name: Get Container App URL
      id: app-url
      run: |
        APP_URL=$(az containerapp show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
        echo "app-url=https://$APP_URL" >> $GITHUB_OUTPUT
        echo "Container App URL: https://$APP_URL"
        
    - name: Test health endpoint
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f ${{ steps.app-url.outputs.app-url }}/health || echo "Health check failed - app may still be starting"
        
    - name: Deployment summary
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üîó Application URL: ${{ steps.app-url.outputs.app-url }}"
        echo "üîç Health Check: ${{ steps.app-url.outputs.app-url }}/health"
        echo "üìä Logs: az containerapp logs show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --follow"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get Container App URL
      id: app-url
      run: |
        APP_URL=$(az containerapp show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
        echo "app-url=https://$APP_URL" >> $GITHUB_OUTPUT
        
    - name: Test application health
      run: |
        echo "Testing application health..."
        
        # Wait for app to be ready
        for i in {1..10}; do
          if curl -f ${{ steps.app-url.outputs.app-url }}/health; then
            echo "‚úÖ Health check passed!"
            break
          else
            echo "‚è≥ Waiting for app to be ready... (attempt $i/10)"
            sleep 30
          fi
        done
        
    - name: Test SharePoint connectivity
      run: |
        echo "Testing SharePoint connectivity..."
        # This would require the app to have a test endpoint
        # For now, just check that the service is responding
        curl -f ${{ steps.app-url.outputs.app-url }}/health
        
    - name: Check application logs
      run: |
        echo "Recent application logs:"
        az containerapp logs show \
          --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --tail 50